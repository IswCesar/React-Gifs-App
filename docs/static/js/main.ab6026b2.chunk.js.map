{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OAAS,uBAAMC,SATM,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,eACRN,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAIb,UACL,uBAAOS,KAAO,OACdC,MAAUX,EACVY,SAhBsB,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,UAYlB,Q,+BCpBAG,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEGI,MAAMF,GAFT,cAEdG,EAFc,gBAGGA,EAASC,OAHZ,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAabM,GAba,4CAAH,sDCERO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAZAC,qBAAU,WAERxB,EAASC,GAAUwB,MAAK,SAACC,GAEvBH,EAAS,CACPf,KAAKkB,EACLL,SAAS,SAIZ,CAACpB,IAEGqB,EDfyBK,CAAa1B,GAAjCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAGMH,EAAOJ,KAAK,SAACC,GAAD,OAAQ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEWvCgB,EAxBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,gBAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAQzB,OACA,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEI6C,EAAWnB,KAAI,SAACoB,GAAD,OACb,cAAC,EAAD,CAAS7B,SAAa6B,GAAaA,YCd7CC,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.ab6026b2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log('Submit done');\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return ( <form onSubmit = { handleSubmit } >\n        <input type = \"text\"\n        value = { inputValue }\n        onChange = { handleInputChange }\n        /> </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifts = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=4AYcgaV1bmiui16R4LZ9UVVpZTSDXJcE`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import React, { useState, useEffect } from 'react'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category}) => {\n\n  const {data:images, loading } = useFetchGifs(category)\n  \n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n      { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <div className=\"card-grid\">\n        \n          {\n            images.map( (img)=> <GifGridItem key={img.id} {...img}/>)\n          }\n        \n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifts } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  // the effect makes just works when category has changed\n  useEffect(()=> {\n\n    getGifts(category).then((imgs) => { \n      \n      setState({\n        data:imgs,\n        loading: false\n      });\n      \n    })\n  }, [category])\n\n  return state\n}","import React, { useState} from 'react';\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Dragon Ball'])\n  \n  // const handleAdd = () => {\n  //   setCategories(['Power rangers', ...categories])\n  // }\n  \n  return (\n  <>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategories = { setCategories }/>\n    <hr />\n    {/* <button onClick={ handleAdd}>Add</button> */}\n    <ol>\n      {\n        categories.map((cat) => \n          <GifGrid category = { cat } key = {cat} />\n        )\n      }\n    </ol>\n  </>)\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n   <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}